name: CI

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
  workflow_dispatch:

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler: [gcc]
        build_type: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Cache APT packages
        uses: actions/cache@v4.2.4
        with:
          path: /var/cache/apt/archives
          key: apt-cache-ubuntu-${{ runner.os }}-${{ hashFiles('**/.github/workflows/*.yml') }}
          restore-keys: |
            apt-cache-ubuntu-${{ runner.os }}-

      - name: Install base dependencies
        run: |
          sudo apt update && sudo apt install -y \
            git \
            gcc \
            cmake \
            make \
            curl \
            ca-certificates \
            pkg-config \
            zlib1g \
            zlib1g-dev \
            libzstd-dev \
            liblz4-dev \
            bzip2 \
            libbz2-dev

      - name: Install PostgreSQL from official repository
        run: |
          # Add official PostgreSQL repository
          sudo install -d /usr/share/postgresql-common/pgdg
          sudo curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc
          sudo sh -c 'echo "deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt update
          
          # Install PostgreSQL with ALL development packages
          sudo apt install -y \
            postgresql-17 \
            postgresql-server-dev-17 \
            postgresql-client-17 \
            postgresql-contrib-17 \
            postgresql-common \
            postgresql-server-dev-all \
            libpq-dev \
            libpq5

      - name: Set PostgreSQL environment and debug paths
        run: |
          # Add PostgreSQL binaries to PATH
          echo "/usr/lib/postgresql/17/bin" >> $GITHUB_PATH
          
          # Debug: Show all PostgreSQL-related directories
          echo "=== PostgreSQL Installation Debug ==="
          /usr/lib/postgresql/17/bin/pg_config --version
          echo "Include directory: $(/usr/lib/postgresql/17/bin/pg_config --includedir)"
          echo "Server include directory: $(/usr/lib/postgresql/17/bin/pg_config --includedir-server)"
          echo "Library directory: $(/usr/lib/postgresql/17/bin/pg_config --libdir)"
          echo "Package library directory: $(/usr/lib/postgresql/17/bin/pg_config --pkglibdir)"
          
          # Check for header files in various locations
          echo "=== Header File Locations ==="
          find /usr/include -name "fmgr.h" 2>/dev/null || echo "fmgr.h not found in /usr/include"
          find /usr/include -name "postgres.h" 2>/dev/null || echo "postgres.h not found in /usr/include"
          
          echo "Contents of /usr/include/postgresql/:"
          ls -la /usr/include/postgresql/ 2>/dev/null || echo "Directory not found"
          
          echo "Contents of server include directory:"
          SERVER_INC=$(/usr/lib/postgresql/17/bin/pg_config --includedir-server)
          ls -la "$SERVER_INC" 2>/dev/null || echo "Server include directory not found: $SERVER_INC"
          
          # Check if the problematic header exists
          if [ -f "$SERVER_INC/fmgr.h" ]; then
            echo "✓ fmgr.h found at: $SERVER_INC/fmgr.h"
          elif [ -f "/usr/include/postgresql/17/server/fmgr.h" ]; then
            echo "✓ fmgr.h found at: /usr/include/postgresql/17/server/fmgr.h"
          elif [ -f "/usr/include/postgresql/server/fmgr.h" ]; then
            echo "✓ fmgr.h found at: /usr/include/postgresql/server/fmgr.h"
          else
            echo "✗ fmgr.h not found in expected locations"
          fi

      - name: Fix include paths in source code (if needed)
        run: |
          # Check what include is actually being used
          echo "=== Checking source file includes ==="
          grep -n "#include.*fmgr.h" src/pgexporter_ext/lib.c || echo "No fmgr.h include found"
          grep -n "#include.*postgres.h" src/pgexporter_ext/lib.c || echo "No postgres.h include found"
          
          # If the source is using server/fmgr.h but the file is at the root level, we may need to fix it
          SERVER_INC=$(/usr/lib/postgresql/17/bin/pg_config --includedir-server)
          if [ -f "$SERVER_INC/fmgr.h" ] && [ ! -f "$SERVER_INC/server/fmgr.h" ]; then
            echo "fmgr.h is at root of server include directory, not in server/ subdirectory"
            echo "Source code may need to use #include \"fmgr.h\" instead of #include \"server/fmgr.h\""
            
            # Temporarily fix the include for CI (you should fix this in the source)
            if grep -q '#include "server/fmgr.h"' src/pgexporter_ext/lib.c; then
              echo "Temporarily fixing include path for CI build..."
              sed -i 's|#include "server/fmgr.h"|#include "fmgr.h"|g' src/pgexporter_ext/lib.c
            fi
          fi

      - name: Build Project
        run: |
          mkdir -p build
          cd build
          
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            export CC=/usr/bin/gcc
          else
            export CC=/usr/bin/clang
          fi
          
          # Configure with CMAKE
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
          
          # Build with verbose output
          make VERBOSE=1

      - name: Install Extension
        run: |
          cd build
          sudo make install
          
          # Verify installation
          PGLIB_DIR=$(/usr/lib/postgresql/17/bin/pg_config --pkglibdir)
          if [ -f "$PGLIB_DIR/pgexporter_ext.so" ]; then
            echo "✓ Extension installed successfully at $PGLIB_DIR/pgexporter_ext.so"
            ls -la "$PGLIB_DIR"/pgexporter_ext*
          else
            echo "✗ Extension installation failed"
            echo "Contents of PostgreSQL lib directory:"
            ls -la "$PGLIB_DIR/" || echo "Directory not found"
          fi

      - name: Start PostgreSQL and test extension
        run: |
          # Start PostgreSQL service
          sudo systemctl start postgresql
          sudo -u postgres createdb testdb
          
          # Test extension installation
          sudo -u postgres psql -d testdb -c "CREATE EXTENSION pgexporter_ext;" || {
            echo "Extension creation failed, checking logs..."
            sudo journalctl -u postgresql --no-pager -n 50
            exit 1
          }
          
          sudo -u postgres psql -d testdb -c "SELECT extname, extversion FROM pg_extension WHERE extname = 'pgexporter_ext';"
          echo "✓ Extension loaded and tested successfully"

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.compiler }}-${{ matrix.build_type }}
          path: |
            build/
            !build/CMakeFiles/
          retention-days: 7
